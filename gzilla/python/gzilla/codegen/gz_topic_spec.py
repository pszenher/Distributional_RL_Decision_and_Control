# generated by datamodel-codegen:
#   filename:  gz_topic_spec.json
#   timestamp: 2025-07-03T15:41:37+00:00
#   version:   0.31.2

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Extra, Field, constr


class Direction(Enum):
    PUB = 'pub'
    SUB = 'sub'


class PrefixType(Enum):
    """
    Type of gz topic prefix used, determining scoping of final topic name
    """

    SCOPED = 'scoped'
    ABSOLUTE = 'absolute'


class GzTopicNameSpec(BaseModel):
    """
    Components of gz topic names, describing how a final topic name is determined
    """

    class Config:
        extra = Extra.forbid
        allow_mutation = False

    prefix_type: PrefixType = Field(
        ...,
        description='Type of gz topic prefix used, determining scoping of final topic name',
    )
    base: str = Field(
        ..., description='Base topic name, possibly overwritten by the sensor <topic>'
    )
    suffix: Optional[str] = Field(
        '', description='Topic name suffix appended to any relevant topic prefixes'
    )
    override: Optional[str] = Field(
        None,
        description='SDF element which, if set, overrides the prefix and base topic names with its value',
    )


class GzTopicSpec(BaseModel):
    """
    Pair of gz topic name and gz message type sent on it
    """

    class Config:
        extra = Extra.forbid
        allow_mutation = False

    msg_type: constr(regex=r'gz\.msgs\.[A-z]+') = Field(
        ..., description="Dot-delimitted gz message type; name prefixed with 'gz.msgs.'"
    )
    topic: GzTopicNameSpec
    direction: Direction
